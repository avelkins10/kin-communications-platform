# KIN Communications Platform
## Enterprise Communications System with Full Twilio Integration

### PROJECT OVERVIEW
Build a unified communications platform for KIN company. 20-30 employees manage ~200 customers through their journey from sale to installation. Platform must handle calls, SMS, voicemail with transcription, call recording, contact management, and intelligent routing - all configurable through the web interface without touching code.

### TECHNOLOGY STACK
- **Frontend**: Next.js 14, TypeScript, Tailwind CSS, shadcn/ui components
- **Backend**: Node.js, Express (for Twilio webhooks)
- **Database**: PostgreSQL (Neon), Redis for caching
- **Telephony**: Twilio TaskRouter, Programmable Voice, Programmable Messaging
- **Storage**: AWS S3 or Twilio Storage for recordings
- **CRM**: Quickbase (existing system - read/write via API)
- **Real-time**: Socket.io for live updates
- **Deployment**: Vercel (frontend) + Railway/Render (backend)

### BUSINESS CONTEXT

#### Teams Using the Platform
1. **Project Coordinators (PCs)** - Own customer relationships from sale to installation
2. **Permitting Team** - Handle permit applications and municipal communications
3. **Interconnection Team** - Manage utility connections and approvals
4. **Scheduling Team** - Coordinate installation appointments
5. **Customer Support** - Handle post-installation issues
6. **Field Crews** - On-site installation teams (use personal phones, receive texts only)
7. **Sales Reps** - Customer acquisition (use personal phones, receive texts only)

#### Problems to Solve
- No unified view of customer communications across departments
- Project Coordinators unaware when other teams contact their customers
- Multiple disconnected phone systems causing confusion
- No intelligent routing based on customer needs or keywords
- Manual processes waste time and create errors
- No audit trail for compliance
- Cannot text field crews and sales reps from office system
- No call recording or voicemail transcription
- Managers cannot configure routing without IT help

### CORE FEATURES REQUIRED

#### Call Management
- Inbound/outbound calling through web browser
- Automatic call recording (dual-channel) for all calls
- Recording playback with controls (play, pause, seek, speed, download)
- Call transfer capabilities (warm and cold)
- Hold, mute, conference features
- Visual call timer with real-time display
- Complete call history with recordings accessible
- One-click calling from any phone number in system

#### Voicemail System
- Auto-voicemail after configurable timeout (default 30 seconds)
- Automatic transcription using Twilio's transcription service
- Visual voicemail queue in main interface
- One-click callback from voicemail
- Email notifications for new voicemails
- Mark as read/unread functionality
- Searchable voicemail transcriptions
- Bulk actions for voicemail management

#### SMS/Messaging
- Two-way SMS with full conversation threading
- Unified conversation view (all messages with a contact)
- Template responses for common scenarios
- SMS scheduling for future delivery
- Read receipts and delivery status
- Ability to text from any configured phone number
- Internal notes on conversations
- SMS to field crews and sales reps

#### Contact Management
- Store all contacts (customers, field crews, sales reps, vendors)
- Contact groups for quick access (e.g., "All Field Crews")
- Click-to-call and click-to-text from contact record
- Import contacts from CSV
- Sync with Quickbase for customer data
- Contact notes and tags
- Contact history (all interactions)
- Quick dial lists for frequent contacts

#### Intelligent Routing
- Keyword detection for automatic routing (permit, utility, schedule, etc.)
- Quickbase lookup for Project Coordinator assignment
- Department-based queues
- Skills-based routing for specialized issues
- Time-based routing (business hours, after hours, holidays)
- Fallback routing when primary agent unavailable
- Manager-configurable routing rules through UI
- Test mode for routing changes before deployment

#### Admin Configuration Panel
- Add/remove users and sync with Twilio Workers
- Buy/configure/release phone numbers
- Visual routing rule builder (drag and drop)
- Business hours configuration
- Holiday schedule management
- IVR menu designer (without code)
- Queue management and priorities
- Skills assignment to agents
- Real-time routing testing

#### User Interface Requirements
- Clean, professional design that's easy on the eyes
- Main navigation tabs: Queue, Contacts, History, Settings
- Real-time updates without page refresh
- Queue view with waiting calls, active calls, voicemails
- Customer context panel with Quickbase iframe
- Recording player embedded in interface
- Presence indicators for all agents
- Quick actions for common tasks
- Responsive but desktop-first design

### DATABASE SCHEMA
```sql
-- Users (Employees)
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL,
  twilio_worker_sid VARCHAR(255),
  skills TEXT[],
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Contacts
CREATE TABLE contacts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  phone VARCHAR(50) NOT NULL,
  email VARCHAR(255),
  type VARCHAR(50), -- FIELD_CREW, SALES_REP, CUSTOMER, VENDOR
  department VARCHAR(100),
  notes TEXT,
  tags TEXT[],
  quickbase_id VARCHAR(100),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Calls
CREATE TABLE calls (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  call_sid VARCHAR(255) UNIQUE,
  from_number VARCHAR(50),
  to_number VARCHAR(50),
  direction VARCHAR(20),
  duration INTEGER,
  recording_url TEXT,
  recording_sid VARCHAR(255),
  transcription TEXT,
  status VARCHAR(50),
  user_id UUID REFERENCES users(id),
  contact_id UUID REFERENCES contacts(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Messages
CREATE TABLE messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  message_sid VARCHAR(255),
  conversation_sid VARCHAR(255),
  from_number VARCHAR(50),
  to_number VARCHAR(50),
  body TEXT,
  media_urls TEXT[],
  direction VARCHAR(20),
  status VARCHAR(50),
  user_id UUID REFERENCES users(id),
  contact_id UUID REFERENCES contacts(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Voicemails
CREATE TABLE voicemails (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  call_sid VARCHAR(255),
  from_number VARCHAR(50),
  recording_url TEXT,
  recording_duration INTEGER,
  transcription TEXT,
  is_new BOOLEAN DEFAULT true,
  assigned_to UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Routing Rules
CREATE TABLE routing_rules (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255),
  description TEXT,
  priority INTEGER,
  conditions JSONB, -- Complex conditions stored as JSON
  actions JSONB, -- What to do when conditions match
  is_active BOOLEAN DEFAULT true,
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Contact Groups
CREATE TABLE contact_groups (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255),
  description TEXT,
  contacts UUID[], -- Array of contact IDs
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW()
);
API ENDPOINTS REQUIRED


typescript
// Twilio Webhooks
POST /api/webhooks/twilio/voice
POST /api/webhooks/twilio/sms
POST /api/webhooks/twilio/status
POST /api/webhooks/twilio/recording
POST /api/webhooks/twilio/transcription

// TaskRouter Webhooks
POST /api/webhooks/taskrouter/assignment
POST /api/webhooks/taskrouter/reservation
POST /api/webhooks/taskrouter/worker

// Contact Management
GET    /api/contacts
POST   /api/contacts
GET    /api/contacts/:id
PUT    /api/contacts/:id
DELETE /api/contacts/:id
POST   /api/contacts/:id/call
POST   /api/contacts/:id/sms
POST   /api/contacts/import

// Recordings
GET  /api/recordings
GET  /api/recordings/:id
GET  /api/recordings/:id/download
GET  /api/recordings/:id/transcription

// Voicemails
GET    /api/voicemails
GET    /api/voicemails/:id
PUT    /api/voicemails/:id/read
POST   /api/voicemails/:id/callback
DELETE /api/voicemails/:id

// Admin Configuration
GET    /api/admin/users
POST   /api/admin/users
PUT    /api/admin/users/:id
DELETE /api/admin/users/:id

GET    /api/admin/phone-numbers
POST   /api/admin/phone-numbers/search
POST   /api/admin/phone-numbers/purchase
PUT    /api/admin/phone-numbers/:id
DELETE /api/admin/phone-numbers/:id

GET    /api/admin/routing-rules
POST   /api/admin/routing-rules
PUT    /api/admin/routing-rules/:id
DELETE /api/admin/routing-rules/:id
POST   /api/admin/routing-rules/test

GET    /api/admin/business-hours
PUT    /api/admin/business-hours

// Worker Authentication
GET  /api/worker/token
POST /api/worker/status
TWILIO SERVICES CONFIGURATION


javascript
// Required Twilio Services and Configuration

1. TaskRouter
   - Workspace for organizing workers and tasks
   - Task Queues for departments (PC, Permitting, Interconnection, Support, General)
   - Workers for each employee with skills attributes
   - Workflow for routing logic

2. Programmable Voice
   - Inbound call handling with webhook
   - Outbound calling capability
   - Call recording (dual-channel)
   - Conference capability
   - TwiML for IVR menus

3. Programmable Messaging
   - SMS/MMS handling
   - Conversations API for threading
   - Message status callbacks

4. Additional Services
   - Transcription for voicemails
   - CNAM lookup for caller ID
   - Recording storage
   - Voice Intelligence (optional for sentiment)

5. Phone Numbers
   - Multiple numbers for departments
   - SMS and Voice capable
   - Configured webhooks
QUICKBASE INTEGRATION


javascript
// Required Quickbase Operations

interface QuickbaseIntegration {
  // Customer Data
  getCustomerByPhone(phone: string): Customer
  getCustomerById(id: string): Customer
  updateCustomerLastContact(id: string, timestamp: Date): void
  
  // Project Coordinator
  getAssignedPC(customerId: string): User
  getPCByEmail(email: string): User
  
  // Activity Logging
  logCommunication(data: {
    customerId: string
    type: 'call' | 'sms' | 'voicemail'
    direction: 'inbound' | 'outbound'
    duration?: number
    notes?: string
    recordingUrl?: string
    agentId: string
    timestamp: Date
  }): void
  
  // Project Status
  getProjectStage(customerId: string): string
  getProjectDetails(customerId: string): Project
}

// Quickbase fields to map:
// Field 148: Customer mobile phone
// Field 255: Project status
// Field 346: Assigned Project Coordinator
USER INTERFACE COMPONENTS


typescript
// Core UI Components Using shadcn/ui

// Layout Components
- MainLayout (with navigation tabs)
- QueueLayout (three-column: queue, conversation, customer)
- SettingsLayout (sidebar navigation)

// Queue Components
- QueueList (active, waiting, voicemails)
- QueueItem (call/sms/voicemail with actions)
- QueueStats (available agents, wait times)
- QueueFilters (all, mine, department)

// Call Components
- ActiveCall (customer info, timer, controls)
- CallControls (mute, hold, transfer, record, end)
- CallTransferDialog (warm/cold transfer)
- ConferenceDialog (add participants)

// Recording Components
- RecordingPlayer (audio controls)
- RecordingList (sortable, searchable)
- TranscriptionView (with highlighting)

// Voicemail Components
- VoicemailList (new and saved)
- VoicemailItem (play, transcription, callback)
- VoicemailPlayer (inline player)

// Contact Components
- ContactsTable (sortable, filterable)
- ContactForm (add/edit)
- QuickDialGrid (favorite contacts)
- ContactImporter (CSV upload)

// Message Components
- MessageThread (conversation view)
- MessageComposer (with templates)
- MessageStatus (delivered, read)

// Admin Components
- UserManagement (CRUD for employees)
- PhoneNumberManager (buy, configure, release)
- RoutingRuleBuilder (drag-drop interface)
- BusinessHoursEditor (weekly schedule)
- IVRDesigner (visual menu builder)
FILE STRUCTURE


kin-platform/
├── src/
│   ├── app/
│   │   ├── (auth)/
│   │   │   └── login/
│   │   ├── dashboard/
│   │   │   ├── layout.tsx
│   │   │   ├── queue/
│   │   │   ├── contacts/
│   │   │   ├── history/
│   │   │   └── settings/
│   │   └── api/
│   │       ├── webhooks/
│   │       ├── contacts/
│   │       ├── recordings/
│   │       ├── voicemails/
│   │       ├── admin/
│   │       └── worker/
│   ├── components/
│   │   ├── ui/           # shadcn/ui base components
│   │   ├── queue/
│   │   ├── call/
│   │   ├── recording/
│   │   ├── voicemail/
│   │   ├── contacts/
│   │   ├── messages/
│   │   └── admin/
│   ├── lib/
│   │   ├── twilio/
│   │   ├── quickbase/
│   │   ├── redis/
│   │   └── db.ts
│   ├── types/
│   └── utils/
├── prisma/
│   └── schema.prisma
├── public/
├── .env.local
└── requirements.md
SUCCESS CRITERIA
	•	All calls are automatically recorded and accessible
	•	Voicemails are transcribed and displayed in queue
	•	Can manage all contacts with click-to-dial/text
	•	Managers can configure routing without code
	•	Clean, professional UI that's intuitive
	•	Real-time updates across all users
	•	Quickbase data integrated seamlessly
	•	Can text field crews and sales reps
	•	All communications logged for compliance
	•	System handles 30 concurrent users smoothly
